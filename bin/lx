#!/bin/bash

# based on tutorial and docs at
# https://www.digitalocean.com/community/tutorials/getting-started-with-lxc-on-an-ubuntu-13-04-vps
# https://linuxcontainers.org/lxc/getting-started/
# https://help.ubuntu.com/lts/serverguide/lxc.html

set -u

DEBUGMODE=no
NOROOT=no

CONTAINERNAME=
TEMPLATEOS=download
ACTION=
EXPOSURE=
EPHEMERAL=no

CUSER=$(whoami)
CPORT=22

DOATTACH=no
INTERFACES='^'$(ifconfig | grep -P '^[^\s]+'|cut -d' ' -f 1|xargs echo|sed 's/ /|/g')'$'
numpat='^[0-9]+$'

CLONETO=
SNAPSHOT=

PASSARGS=

function printhelp {
cat <<EOF

LXC Wrapper by Tai Kedzierski (C) 2016
Released under the GPLv3 (GNU General Public License v3)

DESCRIPTION

Easy wrapper for managing LXC containers

If LXC is not installed, you will be prompted to install.

Several tasks require root permissions:
	* installation
	* adding the container name to hosts file
	* adding the container to IP tables forwarding rules

These are normally done automatically. To turn this off, use the '-z' option


USAGE

  $(basename $0) ACTION CONTAINERNAME [OPTIONS]

ACTIONS

install
	install LXC if it is not yet installed
	offers to set up a non-privileged user
	run again to set up a different user

list
	list the details of the specirfied container

use
	generic action, use with modifier options

create
	create the named container as a new container
	requires a template OS name

copy
	make a copy of the container, requires named container and the "-to" option
	the default action is to clone
	an optional switch is the "-s" switch which will make a snapshot instead of a clone

start
	start the named container
	use the -ephemeral flag to start an ephemeral container

stop
	stop the named container

destroy
	destroy the named container

OPTIONS

-t TEMPLATEOS
	for create action
	Name of the target OS, e.g. "ubuntu"
-z
	does not run steps that require root access

-a
	for start and use actions
	attach to the console of the named container

-p PORT
	for ssh action
	use SSH to connect to the container on this port

-u USER
	for ssh action
	use SSH to connect to the container with this user

-e iface export inport
	operational option
	expose the container's port (inport) to the host's port (export) on interface (iface)

-to DESTCONTAINER
	specify the name of the new container to create

-s
	a special switch for copying, which causes the action to snapshot rather than clone

-ephemeral
	a speacial flag for the start operation which causes an ephmeral instance to start
	rather than a persistent-changes instance

EOF
}

function uconfirm {
	reqanswer='y|yes|Y|YES'
	read -p "[1;32m$@[0m : y/N> "
	[[ $? = 0 ]] && [[ "$REPLY" =~ $reqanswer ]] # returns the status of this test combination
}

function faile {
	echo "[1;31m$@[0m" 1>&2
	exit 1
}

function debuge {
	if [[ "$DEBUGMODE" = yes ]]; then
		echo "[1;34m${@}[0m" 1>&2
	fi
}

function warne {
	echo "[1;33m${@}[0m"
}

function attachcontainer {
	if [[ $DOATTACH = yes ]]; then
		lxc-attach -n "$CONTAINERNAME"
	fi
}

function usecontainer {
	lxc-ls | grep "$CONTAINERNAME" >/dev/null || faile "No such container $CONTAINERNAME"
}

function getconip {
	lxc-ls --fancy | tail -n +3|grep -P "^$CONTAINERNAME\s" | awk '{print $3}'
}

function waitcontainerip {
	CONIP="-"
	while [[ "$CONIP" = "-" ]]; do
		CONIP=$(getconip)
		if [[ "$CONIP" != '-' ]]; then
			echo "$CONIP"
			return
		else
			sleep 5
		fi
	done
}

function lx_cp {
	CPFILES=
	DESTDIR=
	debuge "copying [$@]"
	while [[ -n "$@" ]]; do
		ARG="$1" ; shift
		if [[ -z "$@" ]]; then
			DESTDIR="$(echo $ARG|sed 's// /g')"
		else
			CPFILES="$CPFILES $ARG"
		fi
	done
	#debuge "$(echo "$CPFILES" | base64 -w 0 ; echo)"
	for x in $CPFILES; do # damn multiple-escaping trailing spaces...
		# sudo because of the user namespace. the result will be owned by nobody:nogroup
		sudo cp "$(echo ${x# }|sed -e 's//\ /g')" "$HOME/.local/share/lxc/$CONTAINERNAME/rootfs/$DESTDIR"
	done
}

function makecontainerhost {
	CONIP=$(waitcontainerip)
	grep -P "$CONIP\s.+# LXC host" /etc/hosts && {
		warne "Host already configured"
		return
	}

	debuge "Adding $CONIP $CONTAINERNAME to hosts file"
	# not using the mysu routine because of multiple nested commands and quotes...
	[[ "$NOROOT" = yes ]] || sudo su -c "echo '$CONIP $CONTAINERNAME.lxc # LXC host' >> /etc/hosts"
}

function removecontainerhost {
	CONIP=$(waitcontainerip)
	debuge "removing $CONIP from hosts"
	[[ "$NOROOT" = yes ]] || sudo sed -r "/^$CONIP\s.*# LXC host\$/d" -i /etc/hosts
	debuge "Removal peformed"
}

function exposecontainer {
	if [[ -n "$EXPOSURE" ]]; then
		usecontainer
		CONIP=$(getconip)
		if [[ -z "$CONIP" ]]; then
			warne "Could not get container IP - no exposure performed"
			return
		fi
		if [[ "$CONIP" = '-' ]]; then
			warne "Container [$CONTAINERNAME] is not started and has no IP address."
			return
		fi
		for expx in $(echo "${EXPOSURE#,}" | sed 's/,/ /g'); do
			myiface=$(echo $expx|cut -d':' -f 1)
			myext=$(echo $expx|cut -d':' -f 2)
			myint=$(echo $expx|cut -d':' -f 3)
			warne "Adding iptables rule ..."
			mysu iptables -t nat -A PREROUTING -i $myiface -p tcp --dport $myext -j DNAT --to "$CONIP:$myint"
		done
	fi
}

function mysu {
	if [[ "$NOROOT" = yes ]]; then return; fi

	sudo $@
}

function setupuser {
	read -p "Username: "
	myuser=$(cat /etc/passwd|cut -d ':' -f1|grep -P "^$REPLY\$")
	userhome=$(cat /etc/passwd|grep -P "^$myuser:"|cut -d ':' -f6)
	[[ -z "$myuser" ]] && faile "No such user [$myuser]"

	# there is an issue when setting up on ecryptfs encrypted home directories
	# https://bugs.launchpad.net/ubuntu/+source/lxc/+bug/1389305
	if [[ $(mount | grep "$myuser" | grep ecryptfs -c) -gt 0 ]]; then
		uconfirm "$myuser seems to be using an encrypted home folder. Their containers will not allow suid executables. Install workaround under /var/nocryptlxc?" && {
			nclxcd="/var/nocryptlxc/$myuser"
			[[ -d "$nclxcd" ]] && { warne "nocrypt directory for $myuser already exists. Abort" ; return ; }
			mkdir -p "$nclxcd"

			[[ -d "$userhome/.config/lxc" ]] && mv "$userhome/.config/lxc" "$nclxcd/config"
			[[ -d "$userhome/.local/share/lxc" ]] && mv "$userhome/.local/share/lxc" "$nclxcd/store"
			mkdir -p "$nclxcd/config"
			mkdir -p "$nclxcd/store"
			chown $myuser:$myuser "$nclxcd" "$nclxcd/config" "$nclxcd/store"
			
			ln -s "$nclxcd/config" "$userhome/.config/lxc"
			ln -s "$nclxcd/store" "$userhome/.local/share/lxc"
		}
	fi
	[[ ! -e "$userhome/.config/lxc" ]] && mkdir -p "$userhome/.config/lxc"
	chown -R $myuser:$myuser "$userhome/.config/lxc"

	grep -P "^\s*$myuser" /etc/lxc/lxc-usernet >/dev/null || echo "$myuser veth lxcbr0 10" >> /etc/lxc/lxc-usernet
	cp -n /etc/lxc/default.conf "$userhome/.config/lxc/"
	chown $myuser:$myuser "$userhome/.config/lxc/default.conf"
	grep 'lxc.id_map = ' "$userhome/.config/lxc/default.conf" || cat <<EOF >> "$userhome/.config/lxc/default.conf"

lxc.id_map = u 0 $(cat /etc/subuid |grep $myuser| awk -F ':' '{print $2,$3}')
lxc.id_map = g 0 $(cat /etc/subgid |grep $myuser| awk -F ':' '{print $2,$3}')
EOF
	# these need to be set so as to be able to run unprivileged
	# the rest of the structure in $userhome/.local/share/lxc should be OK
	chmod o+x $userhome
	chmod o+x $userhome/.local
	chmod o+x $userhome/.local/share
	chmod o+x $userhome/.local/share/lxc
}


for x in $@; do
	case "$x" in
		--help|-h)
			printhelp
			exit 0
			;;
		-z)
			NOROOT=yes
			;;
	esac
done

if [[ -z "$@" ]]; then
	lxc-ls --fancy
	exit 0
fi

if [[ -z "$@" ]]; then
	faile "You must specify the action to take"
fi

ACTION=$1 ; shift

while [[ -n "$@" ]]; do
	ARG=$1 ; shift
	debuge "Processing [$ARG]"
	case "$ARG" in
		-a)
			debuge attach option
			DOATTACH=yes
			;;
		-t)
			TEMPLATEOS="$1" ; shift
			;;
		-e)
			IFACE=$1 ; shift
			EXPORT=$1 ; shift
			INPORT=$1 ; shift
			if [[ ! "$IFACE" =~ $INTERFACES ]] || [[ ! "$EXPORT" =~ $numpat ]] || [[ ! "$INPORT" =~ $numpat ]]; then
				faile "Invalid interface, external port or internal port: $IFACE $EXPORT $INPORT"
			fi
			EXPOSURE="$EXPOSURE,$IFACE:$EXPORT:$INPORT"
			;;
		-u)
			CUSER=$1 ; shift
			;;
		-p)
			CPORT=$1 ; shift
			;;
		-to)
			CLONETO=$1 ; shift
			;;
		-ephemeral)
			EPHEMERAL=yes
			;;
		-s)
			SNAPSHOT=-s
			;;
		--)
			while [[ -n "$@" ]]; do
				debuge "Passing arg thru $1"
				PASSARGS="$PASSARGS $(echo "$1"|sed -r 's/\s//g')" # passing space characters around subrountines is hell
				shift
			done
			;;
		--install)
			DOINSTALL=yes
			;;
		--help|-h)
			printhelp
			exit 0
			;;
		--debug)
			DEBUGMODE=yes
			;;
		*)
			debuge "Got container $ARG"
			CONTAINERNAME=$ARG
			;;
	esac
done

if [[ "$ACTION" = install ]]; then
	[[ $UID -ne 0 ]] && faile "You need to be root"
	which lxc-ls >/dev/null 2>&1 || ( uconfirm "Install LXC?" && {
		apt update
		apt install lxc
	}
	)
	lxc-checkconfig

	uconfirm "Setup unprivilieged user?" && setupuser
	exit 0
fi

exposecontainer # ... not sure this is where it should really be.....

if [[ -z "$CONTAINERNAME" ]]; then
	faile "You must specify a container name"
fi

if [[ "$ACTION" = create ]]; then
	time lxc-create -n "$CONTAINERNAME" -t "$TEMPLATEOS"
	# this downloads from some online location... where??
elif [[ "$ACTION" = start ]]; then
	usecontainer
	if [[ "$EPHEMERAL" = yes ]]; then
		lxc-start-ephemeral -o "$CONTAINERNAME" -d
	else
		lxc-start -n "$CONTAINERNAME" -d
	fi
	debuge "Making container"
	makecontainerhost
	debuge "Attaching container"
	attachcontainer
elif [[ "$ACTION" = list ]]; then
	lxc-ls --fancy | head -n 2
	lxc-ls --fancy | tail -n +3 | grep "$CONTAINERNAME"
elif [[ "$ACTION" = stop ]]; then
	usecontainer
	removecontainerhost
	lxc-stop -n "$CONTAINERNAME"
	warne "Run 'iptables -t nat -L -v' to check for dangling port forward rules"
elif [[ "$ACTION" = destroy ]]; then
	usecontainer
	read -p "[1;31mTo destroy the container [1;32m$CONTAINERNAME[1;31m, type its name in again: [0m"
	if [[ "$REPLY" = "$CONTAINERNAME" ]]; then
		lxc-destroy -n "$CONTAINERNAME"
	fi
elif [[ "$ACTION" = copy ]]; then
	usecontainer
	if [[ -z "$CLONETO" ]]; then
		faile "You did not define destination container with -to option"
	fi
	if [[ "$SNAPSHOT" = '-s' ]]; then
		lxc-snapshot -o "$CONTAINERNAME" -n "$CLONETO"
	else
		lxc-clone -o "$CONTAINERNAME" -n "$CLONETO"
	fi
elif [[ "$ACTION" = cp ]]; then
	faile "not yet ready"
	usecontainer
	lx_cp $PASSARGS
elif [[ "$ACTION" = ssh ]]; then
	usecontainer
	CONIP=$(getconip)
	ssh ${CUSER}@$CONIP -p $CPORT
elif [[ "$ACTION" = use ]]; then
	usecontainer
	attachcontainer
elif [[ "$ACTION" = attach ]]; then
	usecontainer
	DOATTACH=yes
	attachcontainer
else
	faile "Unknown command [$ACTION]"
fi
